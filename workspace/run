#!/bin/bash

set -e

cd $(dirname "$0")

IMAGE_NAME="wfas-workspace"
CONTAINER_NAME="wfas-workspace"
NAME=user
SSH_PASSWORD="abcd"

VOLUME_WORKSPACE="$PWD/../"
VOLUME_VSCODESERVER="$PWD/temp/.vscode-server/"

usage_message(){
cat << EOF

    This script will help you manage the docker workspace of this project.

    You can execute this script with the following options.

    --start     : build and enter the workspace via ssh connection
    --stop      : stop and exit the workspace
    --prune     : remove all images and building cache so that you can
                  re-build the latest environment later

EOF
}

start_environment() {
    if [[ "$(docker images -q $IMAGE_NAME)" == "" ]]; then
        cp ../Server/requirements.txt ./server_requirements.txt > /dev/null 2>&1 || touch server_requirements.txt
        docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) \
            --build-arg NAME=${NAME} --build-arg DEFAULT_PWD=${SSH_PASSWORD} \
            -t $IMAGE_NAME . \
            || { echo "error due to docker build image" && exit 1; }
        [[ $OSTYPE == "msys" ]] && sed -i '/127.0.0.1/d' ~/.ssh/known_hosts
        rm server_requirements.txt
    fi

    [[ -d ${VOLUME_VSCODESERVER} ]] || mkdir -p ${VOLUME_VSCODESERVER}

    if [[ "$(docker ps | grep $CONTAINER_NAME)" == "" ]]; then
        docker run -d \
            -v $([[ $OSTYPE == "msys" ]] && echo /${VOLUME_WORKSPACE} || echo ${VOLUME_WORKSPACE}):/workspace/ \
            -v $([[ $OSTYPE == "msys" ]] && echo /${VOLUME_VSCODESERVER} || echo ${VOLUME_VSCODESERVER}):/home/${NAME}/.vscode-server/ \
            -p 22:22 \
            -p 5000:5000 \
            --name $CONTAINER_NAME \
            $IMAGE_NAME \
            || { echo "error due to docker build image" && exit 1; }
    fi

    echo -e "\nThe password of SSH login : ${SSH_PASSWORD}\n"
    ssh -p 22 user@127.0.0.1
}

stop_docker_container() {
    if [[ "$(docker ps | grep $CONTAINER_NAME)" != "" ]]; then
        docker container rm -f $CONTAINER_NAME
    fi
}

remove_docker_image() {
    if [[ "$(docker images -q $IMAGE_NAME)" != "" ]]; then
        docker rmi $IMAGE_NAME
    fi
}

export DOCKER_SCAN_SUGGEST=false

[[ $(docker ps > /dev/null 2>&1; echo $?) != 0 ]] && echo "error: please install and start Docker Engine first!!!" && exit 1

case $1 in 
    --start )
        start_environment
        ;;
    --stop )
        stop_docker_container
        ;;
    --prune )
        stop_docker_container
        remove_docker_image
        ;;
    * )
        usage_message
        ;;
esac
